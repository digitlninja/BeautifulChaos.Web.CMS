// <auto-generated />
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Data.Migrations.BeautifulChaos
{
    [DbContext(typeof(BeautifulChaosContext))]
    [Migration("20180116145113_UpdateServicesPageKeys")]
    partial class UpdateServicesPageKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset>("DeletedAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<int>("ServicePageId");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServicePageId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Data.Entities.ServicesPage", b =>
                {
                    b.Property<int>("ServicesPageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content1Header")
                        .IsRequired();

                    b.Property<string>("Content1Paragraph")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset>("DeletedAt");

                    b.Property<string>("FeatureLeftIcon")
                        .IsRequired();

                    b.Property<string>("FeatureLeftParagraph")
                        .IsRequired();

                    b.Property<string>("FeatureLeftTitle")
                        .IsRequired();

                    b.Property<string>("FeatureMidIcon")
                        .IsRequired();

                    b.Property<string>("FeatureMidParagraph")
                        .IsRequired();

                    b.Property<string>("FeatureMidtTitle")
                        .IsRequired();

                    b.Property<string>("FeatureRightIcon")
                        .IsRequired();

                    b.Property<string>("FeatureRightParagraph")
                        .IsRequired();

                    b.Property<string>("FeatureRightTitle")
                        .IsRequired();

                    b.Property<string>("HeaderParagraph")
                        .IsRequired();

                    b.Property<string>("HeaderTitle")
                        .IsRequired();

                    b.Property<int>("ServiceId");

                    b.Property<string>("ServiceSection1Title");

                    b.Property<string>("ServiceSection2Title");

                    b.Property<string>("ServiceSection3Title");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("ServicesPageId");

                    b.ToTable("ServicesPage");
                });

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.HasOne("Data.Entities.ServicesPage", "ServicesPage")
                        .WithMany("Services")
                        .HasForeignKey("ServicePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
