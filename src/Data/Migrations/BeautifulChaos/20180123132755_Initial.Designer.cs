// <auto-generated />
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Data.Migrations.BeautifulChaos
{
    [DbContext(typeof(BeautifulChaosContext))]
    [Migration("20180123132755_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutImage1");

                    b.Property<string>("AboutImage2");

                    b.Property<string>("AboutImage3");

                    b.Property<string>("Content1Header");

                    b.Property<string>("Content1Paragraph");

                    b.Property<string>("DescriptionBlock1Header");

                    b.Property<string>("DescriptionBlock1Image");

                    b.Property<string>("DescriptionBlock1Paragraph");

                    b.Property<string>("DescriptionBlock2Header");

                    b.Property<string>("DescriptionBlock2Image");

                    b.Property<string>("DescriptionBlock2Paragraph");

                    b.Property<string>("HeaderParagraph");

                    b.Property<string>("HeaderTitle");

                    b.Property<int>("PageId");

                    b.Property<string>("TeamParagraph");

                    b.Property<string>("TeamTitle");

                    b.HasKey("AboutId");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("About");
                });

            modelBuilder.Entity("Data.Entities.ContentColumn", b =>
                {
                    b.Property<int>("ContentColumnId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Image");

                    b.Property<int>("PageId");

                    b.Property<string>("PageName");

                    b.Property<string>("Paragraph");

                    b.Property<string>("Title");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("ContentColumnId");

                    b.HasIndex("PageId");

                    b.ToTable("ContentColumns");
                });

            modelBuilder.Entity("Data.Entities.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PageName");

                    b.HasKey("PageId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.Property<int>("ServicesPageId");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("ServiceId");

                    b.HasIndex("ServicesPageId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Data.Entities.ServicesPage", b =>
                {
                    b.Property<int>("ServicesPageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content1Header");

                    b.Property<string>("Content1Paragraph");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("HeaderParagraph");

                    b.Property<string>("HeaderTitle");

                    b.Property<int>("PageId");

                    b.Property<string>("ServiceSection1Title");

                    b.Property<string>("ServiceSection2Title");

                    b.Property<string>("ServiceSection3Title");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("ServicesPageId");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("ServicesPage");
                });

            modelBuilder.Entity("Data.Entities.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TestimonialContent");

                    b.Property<int>("TestimonialsPageId");

                    b.HasKey("TestimonialId");

                    b.HasIndex("TestimonialsPageId");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("Data.Entities.TestimonialsPage", b =>
                {
                    b.Property<int>("TestimonialsPageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentSectionHeader");

                    b.Property<string>("ContentSectionParagraph");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset?>("DeletedAt");

                    b.Property<string>("HeaderTitle");

                    b.Property<string>("LeftContentParagraph");

                    b.Property<string>("LeftContentTitle");

                    b.Property<string>("MiddleContentParagraph");

                    b.Property<string>("MiddleContentTitle");

                    b.Property<int>("PageId");

                    b.Property<string>("RightContentParagraph");

                    b.Property<string>("RightContentTitle");

                    b.Property<Guid>("UUId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("TestimonialsPageId");

                    b.HasIndex("PageId")
                        .IsUnique();

                    b.ToTable("TestimonialsPage");
                });

            modelBuilder.Entity("Data.Entities.About", b =>
                {
                    b.HasOne("Data.Entities.Page", "Page")
                        .WithOne("About")
                        .HasForeignKey("Data.Entities.About", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ContentColumn", b =>
                {
                    b.HasOne("Data.Entities.Page", "Page")
                        .WithMany("ContentColumns")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Service", b =>
                {
                    b.HasOne("Data.Entities.ServicesPage", "ServicesPage")
                        .WithMany("Services")
                        .HasForeignKey("ServicesPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.ServicesPage", b =>
                {
                    b.HasOne("Data.Entities.Page", "Page")
                        .WithOne("ServicesPage")
                        .HasForeignKey("Data.Entities.ServicesPage", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.Testimonial", b =>
                {
                    b.HasOne("Data.Entities.TestimonialsPage", "TestimonialsPage")
                        .WithMany("Testimonials")
                        .HasForeignKey("TestimonialsPageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Data.Entities.TestimonialsPage", b =>
                {
                    b.HasOne("Data.Entities.Page", "Page")
                        .WithOne("TestimonialsPage")
                        .HasForeignKey("Data.Entities.TestimonialsPage", "PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
